// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courses     Course[]
  password    String
  masterTable MasterTable?
}

model Course {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  courseCode    String       @unique
  semCourses    SemCourse[]
  MasterTable   MasterTable? @relation(fields: [masterTableId], references: [id])
  masterTableId Int?
}

model SemCourse {
  id           Int        @id @default(autoincrement())
  section      Int
  name         String
  year         Int
  semester     String
  Course       Course?    @relation(fields: [courseId], references: [id])
  courseId     Int?
  professor    Professor  @relation(fields: [professorId], references: [id])
  professorId  Int
  courseInfo   CourseInfo @relation(fields: [courseInfoId], references: [id])
  courseInfoId Int
}

model Professor {
  id        Int         @id @default(autoincrement())
  firstName String?
  lastName  String
  SemCourse SemCourse[]
}

model CourseInfo {
  id                  Int         @id @default(autoincrement())
  credits             Int?
  officeHours         String?
  assignments         Json[]
  schedule            Json[]
  exams               Json[]
  mandatoryAttendance Boolean?
  semCourses          SemCourse[]
}

model MasterTable {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  courses   Course[]
}
